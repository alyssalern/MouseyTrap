package com.alyssalerner.mouseytrap;

import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Random;

/** Responsible for loading the next level.
 * Usage:   Call loadNextLevel() to begin loading the next level.  Then, keep calling levelStillLoading()
 *          until it returns false.  Once it returns false, getCurLevel() should be called to retrieve
 *          the already-created level that was just loaded.
 * Created by Alyssa on 2016-03-30.
 */
public class LevelLoader {
    private final String TAG = "LevelLoader";
    private Random rand = new Random();

    /* The state of loading that the level loader is currently in.
     * LOADING: Currently in process of loading a level.
     * FINISHED: Level finished loading, but this status has not yet been detected by main program.
     * NONE: Set after FINISHED has been detected by main program.
     */
    public enum LoadingState {LOADING, FINISHED, NONE}

    GamePanel gamePanel;
    private Level curLevel;
    private Level nextLevel;
    private LoadingState loadingState = LoadingState.NONE;
    private double panSpeedPx; // Pan speed in pixels per update
    private double panOffset;  // Current amount that the view has been panned while transitioning to a new level
    private double offsetGoal; // Total offset to pan before a level is done loading

    private JSONArray levelData;

    public LevelLoader(GamePanel gamePanel) {
        this.gamePanel = gamePanel;
        levelData = getLevelData();
        curLevel = retrieveLevel(Game.START_LEVEL);
        this.offsetGoal = Game.BASE_WIDTH - Game.SAFE_SPACE_WIDTH;
        panSpeedPx = Game.convertToPixelX(1.0*Game.PAN_SPEED);
    }


    /* Begin loading next level, including panning the view.
     */
    public void loadNextLevel() {
        loadingState = LoadingState.LOADING;
        nextLevel = retrieveLevel(curLevel.getId() + 1);
        nextLevel.setOffset(Game.BASE_WIDTH - Game.SAFE_SPACE_WIDTH);
        nextLevel.setLoading(true);
    }

    /* Returns true if the next level is still loading.
     * Req: This method should only be called once after calling loadNextLevel().
     *
     */
    public boolean levelStillLoading() {
        if(loadingState == LoadingState.FINISHED) {
            loadingState = LoadingState.NONE;
            return false;
        }
        return true;
    }

    public Level getCurLevel() {
        return curLevel;
    }

    public Level getNextLevel() {
        return nextLevel;
    }

    public LoadingState getLoadingState() {
        return loadingState;
    }

    // Reset to level 1
    public void reset() {
        curLevel.resetIds();
        curLevel = retrieveLevel(1);
    }

    // Retrieve level data from JSON file.
    private JSONArray getLevelData() {
        JSONArray levelData = null;
        String levelContents = readFile(R.raw.leveldata);
        try {
            levelData = new JSONArray(levelContents);
        } catch(JSONException e) {
            Log.e(TAG, "Error reading JSON array: " + e);
        }
        return levelData;
    }

    // Retrieve file contents from the given raw resource file.
    private String readFile(int fileRes) {
        String fileContents = "";
        InputStream fStream;
        BufferedReader reader;
        try {
            fStream = gamePanel.getResources().openRawResource(fileRes);
            reader = new BufferedReader(new InputStreamReader(fStream));

            String line;
            while ((line = reader.readLine()) != null) {
                fileContents += line + "\n";
            }
            fStream.close();
            reader.close();
        } catch(IOException e) {
            Log.e(TAG, "Error reading file:" + e);
        }
        return fileContents;
    }

    /* Create a level from the level info in the file.
     * levelNum: The level to retrieve, starting at 1.
     */
    private Level retrieveLevel(int levelNum) {
        JSONObject levelObject = null;
        ArrayList<Trap> traps = new ArrayList<>();

        try {
            levelObject = levelData.getJSONObject(levelNum - 1);

            // Get the traps for this level
            JSONArray trapList = levelObject.getJSONArray("traps");
            JSONObject curTrap = null;
            int row, col;
            // Game.Orientation orientation = null;
            for(int i = 0; i < trapList.length(); i++) {
                curTrap = trapList.getJSONObject(i);
                col = curTrap.getInt("x");
                row = curTrap.getInt("y");
                /*
                switch(curTrap.getString("orientation")) {
                    case "up":      orientation = Game.Orientation.UP; break;
                    case "down":    orientation = Game.Orientation.DOWN; break;
                    case "left":    orientation = Game.Orientation.LEFT; break;
                    case "right":   orientation = Game.Orientation.RIGHT; break;
                    default: break;
                }
                */
                Trap trap = new Trap(gamePanel.trapImage, Game.TRAP_HEIGHT, row, col);
                traps.add(trap);
            }

        } catch(Exception e) {
            Log.e(TAG, "Error loading level "+ levelNum + ": " + e);
            e.printStackTrace();
        }

        int nCheeses = getNCheeses(levelNum);
        ArrayList<Cheese> cheeses = new ArrayList<>();

        // Add cheeses to this level at random positions.
        for(int i = 0; i < nCheeses; i++) {
            cheeses.add(getRandomCheese(traps, cheeses));
        }
        return new Level(traps, cheeses);
    }

    /* Get the number of cheeses for this level.
     * levelId: The level's id.
     */
    private int getNCheeses(int levelId) {
        int roll = rand.nextInt(100);
        int nCheeses;

        if(levelId == 1)
            nCheeses = 1;
        else if(levelId < 3)
            nCheeses = 1;
        else if(roll < 10)
            nCheeses = 0;
        else if(roll < 60)
            nCheeses = 1;
        else if(roll < 86)
            nCheeses = 2;
        else
            nCheeses = 3;

        return nCheeses;
    }

    /* Return a randomly placed cheese.
     * traps: The trap obstacles to avoid
     * cheeses: The cheese obstacles to avoid
     */
    private Cheese getRandomCheese(ArrayList<Trap> traps, ArrayList<Cheese> cheeses) {
        Cheese randCheese = new Cheese(gamePanel.cheeseImage, Game.CHEESE_HEIGHT);
        ArrayList<GameObject> obstacles = new ArrayList<>();
        for(Cheese cheese : cheeses)
            obstacles.add(cheese.copy());
        for(Trap trap : traps)
            obstacles.add(trap.copy());
        randCheese.placeAtRandomSpot(obstacles);
        return randCheese;
    }

    // If loading, Continue panning the view.
    public void update(Player player, Background background) {
        if(loadingState == LoadingState.LOADING) {
            player.offsetBy(-1*Game.PAN_SPEED);
            background.offsetBy(-1*Game.PAN_SPEED);
            curLevel.offsetBy(-1*Game.PAN_SPEED);
            nextLevel.offsetBy(-1*Game.PAN_SPEED);

            panOffset = (panOffset + Game.PAN_SPEED <= offsetGoal)? (panOffset + Game.PAN_SPEED) : offsetGoal;

            // Detect when finished panning view
            if(panOffset == offsetGoal) {
                loadingState = LoadingState.FINISHED;
                panOffset = 0;
                curLevel = nextLevel;
                nextLevel = null;
                curLevel.setOffset(0);
                curLevel.setLoading(false);
                player.setOffset(0);
                player.positionAtStart(false);
            }

        }
    }
}
